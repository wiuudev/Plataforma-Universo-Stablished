var markerAddPointDefaultSymbology = null; export const _addPoint = (o, t, i) => { if (null == o || 2 !== o.length) throw Error("addPoint must have valid argument or coordinate"); null !== markerAddPointDefaultSymbology && t.removeLayer(markerAddPointDefaultSymbology), (markerAddPointDefaultSymbology = new i.marker(o, { opacity: 1 })).addTo(t), t.setView(o) }; var markerAddPointWithTooltip = null, tooltipAddPointWithTooltip = null; export const _addPointTooltip = (o, t, i) => { if (null == o) throw Error("addPointTooltip must have valid argument"); if (void 0 === o.coordinate || null === o.coordinate || 2 !== o.coordinate.length) throw Error("addPointTooltip must have valid coordinate"); if (void 0 === o.tooltip.content || null === o.tooltip.content) throw Error("addPointTooltip must have valid content"); null !== markerAddPointWithTooltip && t.removeLayer(markerAddPointWithTooltip), null !== tooltipAddPointWithTooltip && t.removeLayer(tooltipAddPointWithTooltip), (markerAddPointWithTooltip = new i.marker(o.coordinate, { opacity: 1 })).addTo(t), tooltipAddPointWithTooltip = L.tooltip(o.coordinate, o.tooltip).addTo(t), t.setView(o.coordinate) }; var markerAddPointCustomSymbology = null; export const _addPointCustomSymbology = (o, t, i) => { if (null == o) throw Error("addPoints must have valid argument"); if (void 0 === o.coordinate || null === o.coordinate || 2 !== o.coordinate.length) throw Error("addPoint must have valid coordinate"); null !== markerAddPointCustomSymbology && t.removeLayer(markerAddPointCustomSymbology), (markerAddPointCustomSymbology = new i.circleMarker(o.coordinate, o.symbol)).addTo(t), t.setView(o.coordinate) }; var markerAddPointCustomSymbologyTooltip = null, tooltipAddPointCustomSymbologyTooltip = null; export const _addPointCustomSymbologyAndTooltip = (o, t, i) => { if (null == o) throw Error("addPoints must have valid argument"); if (void 0 === o.coordinate || null === o.coordinate || 2 !== o.coordinate.length) throw Error("addPoint must have valid coordinate"); if (void 0 === o.tooltip.content || null === o.tooltip.content) throw Error("addPointTooltip must have valid content"); null !== markerAddPointCustomSymbologyTooltip && t.removeLayer(markerAddPointCustomSymbologyTooltip), null !== tooltipAddPointCustomSymbologyTooltip && t.removeLayer(tooltipAddPointCustomSymbologyTooltip), (markerAddPointCustomSymbologyTooltip = new i.circleMarker(o.coordinate, o.symbol)).addTo(t), tooltipAddPointCustomSymbologyTooltip = L.tooltip(o.coordinate, o.tooltip).addTo(t), t.setView(o.coordinate) }; var markerAddPointIcon = null; export const _addPointIcon = (o, t, i) => { if (null == o) throw Error("addPoint must have valid argument"); if (void 0 === o.coordinate || null === o.coordinate || 2 !== o.coordinate.length) throw Error("addPoint must have valid coordinate"); if (void 0 === o.icon || null === o.icon) throw Error("addPoint must have valid icon"); if (void 0 === o.icon.iconUrl || null === o.icon.iconUrl) throw Error("addPoint must have valid urlIcon"); null !== markerAddPointIcon && t.removeLayer(markerAddPointIcon); var n = L.icon(o.icon); (markerAddPointIcon = new i.marker(o.coordinate, { opacity: 1, icon: n })).addTo(t), t.setView(o.coordinate) }; var markerAddPointIconAndTooltip = null, tooltipAddPointIconAndTooltip = null; export const _addPointIconAndTooltip = (o, t, i) => { if (null == o) throw Error("addPoint must have valid argument"); if (void 0 === o.coordinate || null === o.coordinate || 2 !== o.coordinate.length) throw Error("addPoint must have valid coordinate"); if (void 0 === o.icon || null === o.icon) throw Error("addPoint must have valid icon"); if (void 0 === o.icon.iconUrl || null === o.icon.iconUrl) throw Error("addPoint must have valid urlIcon"); if (void 0 === o.tooltip.content || null === o.tooltip.content) throw Error("addPointTooltip must have valid content"); null !== markerAddPointIconAndTooltip && t.removeLayer(markerAddPointIconAndTooltip), null !== tooltipAddPointIconAndTooltip && t.removeLayer(tooltipAddPointIconAndTooltip); var n = L.icon(o.icon); (markerAddPointIconAndTooltip = new i.marker(o.coordinate, { opacity: 1, icon: n })).addTo(t), tooltipAddPointIconAndTooltip = L.tooltip(o.coordinate, o.tooltip).addTo(t), t.setView(o.coordinate) }; let _defaultSymbolPointFromArray = { radius: 10, color: "#22ffff", weight: 2, fillColor: "#28ffff", opacity: .75 }, _pointsFromArray = []; export const _addPointFromArrayToMap = (o, t, i) => { let n = new i.circleMarker(JSON.parse(o), _defaultSymbolPointFromArray); n.addTo(t), _pointsFromArray.push(n) }; export const _deleteAllPointsFromArray = o => { _pointsFromArray.forEach(t => { o.removeLayer(t) }), _pointsFromArray = [] }; export const _setPointFromArrayCurrentSymbol = o => { _defaultSymbolPointFromArray = JSON.parse(o) }; let _labels = []; export const _addLabelPointFromArrayToMap = (o, t, i) => { let n = i.marker(o.coordinates, { icon: i.divIcon({ iconSize: null, className: "label", html: `<div id = ${o.uuid} style = ${o.labelStyle} >${o.text}</div>`, iconAnchor: o.textAnchor }) }).addTo(t); _labels.push(n) }; export const _deleteAllLabels = o => { _labels.forEach(t => { try { o.removeLayer(t) } catch { } }), _labels = [] };