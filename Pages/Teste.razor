@page "/teste"

@using ApexCharts
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Web

<div class="container-fluid">

    <div class="col-xl-8">
        <div class="row">
            <div class="col-xxl-6 col-lg-6 col-md-6">
                <div class="card custom-card overflow-hidden">
                    <div class="card-body">
                        <div class="d-flex align-items-top justify-content-between">
                            <div>
                                <span class="avatar avatar-md avatar-rounded bg-primary">
                                    <i class="ti ti-users fs-16"></i>
                                </span>
                            </div>
                            <div class="flex-fill ms-3">
                                <div class="d-flex align-items-center justify-content-between flex-wrap">
                                    <div>
                                        <p class="text-muted mb-0">Indicador 1</p>
                                        <h4 class="fw-semibold mt-1">1,02,890</h4>
                                    </div>
                                    <div id="crm-total-customers">
                                        <ApexChart TItem="CrmCustomer" Options=CrmCustomerChartOptions>
                                            <ApexPointSeries TItem="CrmCustomer" Items="crmcustomer" SeriesType="@SeriesType.Line"
                                                             XValue="@(e => e.Month)"
                                                             YAggregate="@(e => e.Sum(e => e.CrmValue))"/>
                                        </ApexChart>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center justify-content-between mt-1">
                                    <div>
                                        <a class="text-primary" href="javascript:void(0);">Ver todos<i class="ti ti-arrow-narrow-right ms-2 fw-semibold d-inline-block"></i></a>
                                    </div>
                                    <div class="text-end">
                                        <p class="mb-0 text-success fw-semibold">+40%</p>
                                        <span class="text-muted op-7 fs-11">esse mês</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xxl-6 col-lg-6 col-md-6">
                <div class="card custom-card overflow-hidden">
                    <div class="card-body">
                        <div class="d-flex align-items-top justify-content-between">
                            <div>
                                <span class="avatar avatar-md avatar-rounded bg-secondary">
                                    <i class="ti ti-wallet fs-16"></i>
                                </span>
                            </div>
                            <div class="flex-fill ms-3">
                                <div class="d-flex align-items-center justify-content-between flex-wrap">
                                    <div>
                                        <p class="text-muted mb-0">Indicador 2</p>
                                        <h4 class="fw-semibold mt-1">R$56,562</h4>
                                    </div>
                                    <div id="crm-total-revenue">
                                        <ApexChart TItem="CrmRevenue" Options=CrmRevenueChartOptions>
                                            <ApexPointSeries TItem="CrmRevenue" Items="crmrevenue" SeriesType="@SeriesType.Line"
                                                             XValue="@(e => e.Month)"
                                                             YAggregate="@(e => e.Sum(e => e.revenueValue))"/>
                                        </ApexChart>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center justify-content-between mt-1">
                                    <div>
                                        <a class="text-secondary" href="javascript:void(0);">Ver todos<i class="ti ti-arrow-narrow-right ms-2 fw-semibold d-inline-block"></i></a>
                                    </div>
                                    <div class="text-end">
                                        <p class="mb-0 text-success fw-semibold">+25%</p>
                                        <span class="text-muted op-7 fs-11">esse mês</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @foreach (var indicator in indicators.Select((value, index) => new { value, index }))
            {
                <div class="col-xxl-6 col-lg-6 col-md-6">
                    <div class="card custom-card overflow-hidden" @onclick="() => ShowModal(indicator.index)">
                        <div class="card-body">
                            <div class="d-flex align-items-top justify-content-between">
                                <div class="flex-fill ms-3">
                                    <div class="d-flex align-items-center justify-content-between flex-wrap">
                                        <div>
                                            <p class="text-muted mb-0">Indicador @indicator.index</p>
                                            <h4 class="fw-semibold mt-1">@indicator.value</h4>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center justify-content-between mt-1">
                                        <div>
                                            <a class="text-primary" href="javascript:void(0);">Atualizar indicador<i class="ti ti-arrow-narrow-right ms-2 fw-semibold d-inline-block"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (isModalVisible)
            {
                <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Atualizar Indicador</h5>
                                <button type="button" class="close" @onclick="HideModal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="newValue">Novo Valor</label>
                                    <input type="text" id="newValue" @bind="newValue" class="form-control"/>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="HideModal">Fechar</button>
                                <button type="button" class="btn btn-primary" @onclick="UpdateValue">Salvar</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isModalVisible = false;
    private List<string> indicators = new List<string> { "0", "0" }; // Lista de indicadores
    private string newValue; // Novo valor a ser definido pelo usuário
    private int currentIndicatorIndex; // Índice do indicador atual a ser atualizado

    private void ShowModal(int index)
    {
        currentIndicatorIndex = index; // Salva o índice do indicador que será atualizado
        newValue = indicators[index]; // Carrega o valor atual no modal
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }

    private void UpdateValue()
    {
        indicators[currentIndicatorIndex] = newValue; // Atualiza o valor do indicador específico
        HideModal();
    }

    // Revenue Analytics Start //
    private List<Analytics> analytics { get; set; } = SampleData.GetAnalyticss();
    private ApexChartOptions<Analytics> analyticsChartOptions { get; set; } = new();

    public class Analytics
    {
        public string? Month { get; set; }
        public decimal Profit { get; set; }
        public decimal Revenue { get; set; }
        public decimal Sales { get; set; }

        // Add other properties as needed
    };

    public static class SampleData
    {
        public static List<Analytics> GetAnalyticss()
        {
            // Replace this with actual data retrieval logic
            List<Analytics> analytics = new List<Analytics>
            {
                new Analytics { Month = "Jan", Profit = 100, Revenue = 180, Sales = 200, },
                new Analytics { Month = "Fev", Profit = 210, Revenue = 620, Sales = 530, },
                new Analytics { Month = "Mar", Profit = 180, Revenue = 476, Sales = 110, },
                new Analytics { Month = "Abr", Profit = 454, Revenue = 220, Sales = 130, },
                new Analytics { Month = "Mai", Profit = 230, Revenue = 520, Sales = 480, },
                new Analytics { Month = "Jun", Profit = 320, Revenue = 780, Sales = 520, },
                new Analytics { Month = "Jul", Profit = 656, Revenue = 435, Sales = 780, },
                new Analytics { Month = "Ago", Profit = 830, Revenue = 515, Sales = 435, },
                new Analytics { Month = "Set", Profit = 350, Revenue = 738, Sales = 475, },
                new Analytics { Month = "Out", Profit = 350, Revenue = 454, Sales = 738, },
                new Analytics { Month = "Nov", Profit = 210, Revenue = 525, Sales = 454, },
                new Analytics { Month = "Dez", Profit = 410, Revenue = 230, Sales = 480, },

                // Add more analytics as needed
            };

            return analytics;
        }
    }
    // Revenue Analytics End //

    // ProfitEarned BarChart Start //
    private List<ProfitsBarChart> Basicbars { get; set; } = BarData.GetProfitsBarCharts();
    private ApexChartOptions<ProfitsBarChart> ProfitsChartOptions { get; set; } = new();

    public class ProfitsBarChart
    {
        public string? Week { get; set; }
        public decimal ProfitEarned { get; set; }
        public decimal TotalSales { get; set; }
    };

    public static class BarData
    {
        public static List<ProfitsBarChart> GetProfitsBarCharts()
        {
            // Replace this with actual data retrieval logic
            List<ProfitsBarChart> Basicbars = new List<ProfitsBarChart>
            {
                new ProfitsBarChart { Week = "Dom", ProfitEarned = 44, TotalSales = 34 },
                new ProfitsBarChart { Week = "Seg", ProfitEarned = 42, TotalSales = 22 },
                new ProfitsBarChart { Week = "Ter", ProfitEarned = 57, TotalSales = 37 },
                new ProfitsBarChart { Week = "Qua", ProfitEarned = 86, TotalSales = 56 },
                new ProfitsBarChart { Week = "Qui", ProfitEarned = 58, TotalSales = 21 },
                new ProfitsBarChart { Week = "Sex", ProfitEarned = 55, TotalSales = 35 },
                new ProfitsBarChart { Week = "Sab", ProfitEarned = 70, TotalSales = 60 },
            };

            return Basicbars;
        }
    }
    //  ProfitEarned BarChart Ended //

    // CRM CUSTOMER SPARKLINE Start //
    private List<CrmCustomer> crmcustomer { get; set; } = CustomerrData.GetCrmCustomers();
    private ApexChartOptions<CrmCustomer> CrmCustomerChartOptions { get; set; } = new();

    public class CrmCustomer
    {
        public string? Month { get; set; }
        public decimal CrmValue { get; set; }
    };

    public static class CustomerrData
    {
        public static List<CrmCustomer> GetCrmCustomers()
        {
            List<CrmCustomer> crmcustomer = new List<CrmCustomer>
            {
                new CrmCustomer { Month = "Jan", CrmValue = 20 },
                new CrmCustomer { Month = "Fev", CrmValue = 14 },
                new CrmCustomer { Month = "Mar", CrmValue = 19 },
                new CrmCustomer { Month = "Abr", CrmValue = 10 },
                new CrmCustomer { Month = "Mai", CrmValue = 23 },
                new CrmCustomer { Month = "Jun", CrmValue = 20 },
                new CrmCustomer { Month = "Jul", CrmValue = 22 },
                new CrmCustomer { Month = "Ago", CrmValue = 9 },
                new CrmCustomer { Month = "Set", CrmValue = 12 },
            };

            return crmcustomer;
        }
    }
    //  CRM CUSTOMER SPARKLINE End //

    // CRM REVENUE SPARKLINE Start //
    private List<CrmRevenue> crmrevenue { get; set; } = revenueData.GetCrmRevenue();
    private ApexChartOptions<CrmRevenue> CrmRevenueChartOptions { get; set; } = new();

    public class CrmRevenue
    {
        public string? Month { get; set; }
        public decimal revenueValue { get; set; }
    };

    public static class revenueData
    {
        public static List<CrmRevenue> GetCrmRevenue()
        {
            List<CrmRevenue> crmrevenue = new List<CrmRevenue>
            {
                new CrmRevenue { Month = "Jan", revenueValue = 20 },
                new CrmRevenue { Month = "Fev", revenueValue = 14 },
                new CrmRevenue { Month = "Mar", revenueValue = 20 },
                new CrmRevenue { Month = "Abr", revenueValue = 22 },
                new CrmRevenue { Month = "Mai", revenueValue = 9 },
                new CrmRevenue { Month = "Jun", revenueValue = 12 },
                new CrmRevenue { Month = "Jul", revenueValue = 19 },
                new CrmRevenue { Month = "Ago", revenueValue = 10 },
                new CrmRevenue { Month = "Set", revenueValue = 25 },
            };

            return crmrevenue;
        }
    }
    //  CRM REVENUE SPARKLINE End //

    // Conversion Ratio SPARKLINE Start //
    private List<ConversionRatio> Conversionratio { get; set; } = conversionratioData.GetConversionRatio();
    private ApexChartOptions<ConversionRatio> ConversionRatioChartOptions { get; set; } = new();

    public class ConversionRatio
    {
        public string? Month { get; set; }
        public decimal ratioValue { get; set; }
    };

    public static class conversionratioData
    {
        public static List<ConversionRatio> GetConversionRatio()
        {
            List<ConversionRatio> Conversionratio = new List<ConversionRatio>
            {
                new ConversionRatio { Month = "Jan", ratioValue = 20 },
                new ConversionRatio { Month = "Fev", ratioValue = 20 },
                new ConversionRatio { Month = "Mar", ratioValue = 22 },
                new ConversionRatio { Month = "Abr", ratioValue = 9 },
                new ConversionRatio { Month = "Mai", ratioValue = 14 },
                new ConversionRatio { Month = "Jun", ratioValue = 19 },
                new ConversionRatio { Month = "Jul", ratioValue = 10 },
                new ConversionRatio { Month = "Ago", ratioValue = 25 },
                new ConversionRatio { Month = "Set", ratioValue = 12 },
            };

            return Conversionratio;
        }
    }
    //  Conversion Ratio SPARKLINE End //

    // Crm Ratio SPARKLINE Start //
    private List<CrmDeals> crmdeals { get; set; } = crmdealsData.GetCrmDeals();
    private ApexChartOptions<CrmDeals> CrmDealsChartOptions { get; set; } = new();

    public class CrmDeals
    {
        public string? Month { get; set; }
        public decimal dealsValue { get; set; }
    };

    public static class crmdealsData
    {
        public static List<CrmDeals> GetCrmDeals()
        {
            List<CrmDeals> crmdeals = new List<CrmDeals>
            {
                new CrmDeals { Month = "Jan", dealsValue = 20 },
                new CrmDeals { Month = "Fev", dealsValue = 20 },
                new CrmDeals { Month = "Mar", dealsValue = 22 },
                new CrmDeals { Month = "Abr", dealsValue = 9 },
                new CrmDeals { Month = "Mai", dealsValue = 12 },
                new CrmDeals { Month = "Jun", dealsValue = 14 },
                new CrmDeals { Month = "Jul", dealsValue = 19 },
                new CrmDeals { Month = "Ago", dealsValue = 10 },
                new CrmDeals { Month = "Set", dealsValue = 25 },
            };

            return crmdeals;
        }
    }
    //  Crm Ratio SPARKLINE End //

    //  Leadssources Start //
    private List<Leadssource> Leadssources { get; set; } = DataLeadssource.GetLeadssources();
    private ApexChartOptions<Leadssource> LeadChartOptions { get; set; } = new();

    public static class DataLeadssource
    {
        public static List<Leadssource> GetLeadssources()
        {
            // Sample data for Leadssources
            List<Leadssource> Leadssources = new List<Leadssource>
            {
                new Leadssource { Source = "Indicador 1", SourceValue = 32 },
                new Leadssource { Source = "Indicador 2", SourceValue = 27 },
                new Leadssource { Source = "Indicador 3", SourceValue = 25 },
                new Leadssource { Source = "Indicador 4", SourceValue = 16 },
                // Add more sample data as needed
            };

            return Leadssources;
        }
    }

    public class Leadssource
    {
        public string? Source { get; set; }
        public int SourceValue { get; set; }
    }
    //  Leadssources End //


    //  CrmMains Start //
    private List<CrmMain> CrmMains = DataCrmMain.CrmMain();
    private ApexChartOptions<CrmMain> CrmMainChartOptions { get; set; } = new();

    public static class DataCrmMain
    {
        public static List<CrmMain> CrmMain()
        {
            // Implement the method to return a list of CrmMain
            return new List<CrmMain>
            {
                new CrmMain { Country = "Series", DiscountPercentage = 48 },
                // Add more data points as needed
            };
        }
    }

    public class CrmMain
    {
        public string? Country { get; set; }
        public decimal DiscountPercentage { get; set; }
    }

    //  CrmMains End //

    protected override void OnInitialized()
    {
        analyticsChartOptions = new ApexChartOptions<Analytics>
        {
            Chart = new()
            {
                DropShadow = new ApexCharts.DropShadow
                {
                    Enabled = true,
                    Color = "#000",
                    Top = 5,
                    Left = 0,
                    Blur = 3,
                    Opacity = 0.1
                }
            },
            Title = new Title
            {
                Text = "Analise",
                Style = new TitleStyle
                {
                    FontSize = ".8125rem",
                    FontWeight = "semibold",
                    Color = "#8c9097"
                },
            },
            Grid = new Grid
            {
                BorderColor = "#e7e7e7",
                StrokeDashArray = 3
            },
            Tooltip = new ApexCharts.Tooltip
            {
                X = new TooltipX
                {
                    Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return  opts.w.globals.categoryLabels[value-1] + ':' + value}"
                }
            },
            Stroke = new Stroke { Curve = Curve.Smooth },
            DataLabels = new DataLabels
            {
                Formatter = @"function(value, opts) {
                return  Number(value).toLocaleString();}"
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis // Define the first YAxis object
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = @"function (value) {
                        return 'R$' + Number(value).toLocaleString();
                        }"
                    },
                    Min = 0,
                    Max = 1000,
                    StepSize = 200,
                }
            },
        };

        ProfitsChartOptions = new ApexChartOptions<ProfitsBarChart>
        {
            Chart = new()
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoom = false, Zoomin = false, Zoomout = false, Pan = false, Reset = false, Download = false },
                },
            },
            Grid = new Grid
            {
                BorderColor = "#f1f1f1",
                StrokeDashArray = 3
            },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = false,
                    BorderRadius = 5,
                    ColumnWidth = "60%",
                    BorderRadiusApplication = BorderRadiusApplication.Around,
                    BorderRadiusWhenStacked = BorderRadiusWhenStacked.All
                }
            },
            DataLabels = new DataLabels
            {
                Enabled = false,
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis // Define the first YAxis object
                {
                    Min = 0,
                    Max = 100,
                    StepSize = 20,
                }
            },
            Legend = new Legend
            {
                Show = false,
            },
        };

        CrmCustomerChartOptions = new ApexChartOptions<CrmCustomer>
        {
            Chart = new()
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoom = false, Zoomin = false, Zoomout = false, Pan = false, Reset = false, Download = false },
                },
                Width = "100px",
                Height = "40px",
                Sparkline = new()
                {
                    Enabled = true
                },
            },
            Colors = new Color(new List<string> { "var(--primary-color)" }),
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                LineCap = ApexCharts.LineCap.Butt,
                Width = 1.5,
            },
            Fill = new Fill
            {
                Type = new List<FillType> { FillType.Gradient, FillType.Gradient },
                Gradient = new FillGradient
                {
                    OpacityFrom = 0.9,
                    OpacityTo = 0.9,
                    Stops = [0, 98],
                }
            }
        };

        CrmRevenueChartOptions = new ApexChartOptions<CrmRevenue>
        {
            Chart = new()
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoom = false, Zoomin = false, Zoomout = false, Pan = false, Reset = false, Download = false },
                },
                Width = "100px",
                Height = "40px",
                Sparkline = new()
                {
                    Enabled = true
                },
            },
            Colors = new Color(new List<string> { "rgb(35, 183, 229)" }),
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                LineCap = ApexCharts.LineCap.Butt,
                Width = 1.5,
            },
            Fill = new Fill
            {
                Type = new List<FillType> { FillType.Gradient, FillType.Gradient },
                Gradient = new FillGradient
                {
                    OpacityFrom = 0.9,
                    OpacityTo = 0.9,
                    Stops = [0, 98],
                }
            }
        };

        ConversionRatioChartOptions = new ApexChartOptions<ConversionRatio>
        {
            Chart = new()
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoom = false, Zoomin = false, Zoomout = false, Pan = false, Reset = false, Download = false },
                },
                Width = "100px",
                Height = "40px",
                Sparkline = new()
                {
                    Enabled = true
                },
            },
            Colors = new Color(new List<string> { "rgb(38, 191, 148)" }),
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                LineCap = ApexCharts.LineCap.Butt,
                Width = 1.5,
            },
            Fill = new Fill
            {
                Type = new List<FillType> { FillType.Gradient, FillType.Gradient },
                Gradient = new FillGradient
                {
                    OpacityFrom = 0.9,
                    OpacityTo = 0.9,
                    Stops = [0, 98],
                }
            }
        };

        CrmDealsChartOptions = new ApexChartOptions<CrmDeals>
        {
            Chart = new()
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoom = false, Zoomin = false, Zoomout = false, Pan = false, Reset = false, Download = false },
                },
                Width = "100px",
                Height = "40px",
                Sparkline = new()
                {
                    Enabled = true
                },
            },
            Colors = new Color(new List<string> { "rgb(245, 184, 73)" }),
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                LineCap = ApexCharts.LineCap.Butt,
                Width = 1.5,
            },
            Fill = new Fill
            {
                Type = new List<FillType> { FillType.Gradient, FillType.Gradient },
                Gradient = new FillGradient
                {
                    OpacityFrom = 0.9,
                    OpacityTo = 0.9,
                    Stops = [0, 98],
                }
            }
        };

        LeadChartOptions = new ApexChartOptions<Leadssource>
        {
            Chart = new()
            {
                Height = "10rem",
            },
            Stroke = new Stroke
            {
                LineCap = ApexCharts.LineCap.Round,
                Width = 0
            },
            Legend = new Legend
            {
                Show = false,
            },

            Colors = new Color(new List<string> { "var(--primary-color)", "rgb(35, 183, 229)", "rgb(38, 191, 148)", "rgb(245, 184, 73)" }),

            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Size = "85%",
                    },
                }
            },
        };

        CrmMainChartOptions = new ApexChartOptions<CrmMain>
        {
            Chart = new()
            {
                Height = "127px",
                Width = "100px",
            },
            Stroke = new Stroke
            {
                LineCap = ApexCharts.LineCap.Round,
            },
            Colors = new Color(new List<string> { "var(--primary-color)" }),
            PlotOptions = new PlotOptions
            {
                RadialBar = new PlotOptionsRadialBar
                {
                    Hollow = new Hollow
                    {
                        Margin = 0, // Set margin value
                        Size = "55%", // Set size as percentage
                        Background = "#ffffff", // Set background color
                    },
                    DataLabels = new RadialBarDataLabels
                    {
                        Name = new RadialBarDataLabelsName
                        {
                            Show = false
                        },
                        Value = new RadialBarDataLabelsValue
                        {
                            OffsetY = 5,
                            Color = "#4b9bfa",
                            FontSize = ".875rem",
                            Show = true,
                            FontWeight = 600
                        }
                    }
                },
            },
        };
    }

    private List<string> cardItems = new List<string> { "Card 1", "Card 2", "Card 3" };
}