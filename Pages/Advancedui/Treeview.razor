@page "/treeview"
@using Excubo.Blazor.TreeViews

<div class="container-fluid">

    <!-- Page Header -->
    <div class="d-md-flex d-block align-items-center justify-content-between my-4 page-header-breadcrumb">
        <h1 class="page-title fw-semibold fs-18 mb-0">Treeview</h1>
        <div class="ms-md-1 ms-0">
            <nav>
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="javascript:void(0);">Advanced Ui</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Treeview</li>
                </ol>
            </nav>
        </div>
    </div>
    <!-- Page Header Close -->

    <!-- Start::row-1 -->
    <div class="row">
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Basic TreeView</div>
                </div>
                <div class="card-body">
                   <TreeView Items="Items" GetParent="GetParent" />
                </div>
            </div>

        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Basic TreeView Style 2</div>
                </div>
                <div class="card-body">
                    <TreeView Items="Nested" GetChildren="(item) => item.Children">
                        <ItemTemplate>
                            @context.Item.Self
                        </ItemTemplate>
                    </TreeView>
                </div>
            </div>

        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Basic TreeView Style 3</div>
                </div>
                <div class="card-body">
                    <TreeView Items="NestedItems" GetParent="GetNestedItemsParent" SortBy="(e) => e.OrderByDescending(v => v)" />
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Asynchronous Treeview</div>
                </div>
                <div class="card-body">
                    <TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems">
                        <ItemTemplate>
                            @context.Item.Self
                        </ItemTemplate>
                    </TreeViewAsync>

                    <h4>Custom loading template</h4>
                    <TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems">
                        <ItemTemplate>
                            @context.Item.Self
                        </ItemTemplate>
                        <LoadingTemplate>
                            Loading...
                        </LoadingTemplate>
                    </TreeViewAsync>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Collapse Treeview</div>
                </div>
                <div class="card-body">
                    <TreeView Items="CollapseItems" GetParent="GetParent">
                        <ItemTemplate>
                            <Collapse @bind-Value="@context.Item.Collapsed" />
                            @context.Item.Value (@(context.Item.Collapsed ? "collapsed" : "expanded"))
                        </ItemTemplate>
                    </TreeView>

                    <button class="btn btn-primary" @onclick="() => { CollapseItems.First().Collapsed = !CollapseItems.First().Collapsed; }">Toggle expansion state of first item</button>

                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Custom Item Treeview</div>
                </div>
                <div class="card-body">
                    <TreeView Items="CustomNested" GetChildren="(item) => item.Children" ListClass="stronger-indent" ItemClass="red-border">
                        <ItemTemplate>
                            <div style="color: @context.Item.Color">@context.Item.Self</div>
                        </ItemTemplate>
                    </TreeView>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Disable TreeView</div>
                </div>
                <div class="card-body">
                    <TreeView Disabled="TreeDisabled" Items="DisabledItems" ItemDisabled="item => item.Disabled" GetParent="GetDisabledParent" AllowSelection>
                        <ItemTemplate>
                            @context.Item.Value (@(context.Item.Disabled ? "disabled" : "enabled"))
                        </ItemTemplate>
                    </TreeView>
                    <button class="btn btn-primary btn-sm m-1" @onclick="() => TreeDisabled = !TreeDisabled">Toggle disable state of tree</button>
                    <button class="btn btn-primary btn-sm m-1" @onclick="@(() => { DisabledItems.First(x => x.Value == "Nested 1").Disabled = !DisabledItems.First(x => x.Value == "Nested 1").Disabled; })">Toggle disable state of 1</button>
                    <button class="btn btn-primary btn-sm m-1" @onclick="@(() => { DisabledItems.First(x => x.Value == "Nested 1.1").Disabled = !DisabledItems.First(x => x.Value == "Nested 1.1").Disabled; })">Toggle disable state of 1.1</button>
                    <button class="btn btn-primary btn-sm m-1" @onclick="@(() => { DisabledItems.First(x => x.Value == "Nested 1.2").Disabled = !DisabledItems.First(x => x.Value == "Nested 1.2").Disabled; })">Toggle disable state of 1.2</button>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">FilterBy TreeView</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <TreeView Items="filterItems" GetParent="(_) => null" AllowSelection="true" @bind-SelectedItems="SelectedfilterValues" />
                        </div>
                        <div class="col-sm-6">
                            <TreeView Items="filterItems" GetParent="GetfilterParent" FilterBy='(e) => e.Where(v => !SelectedfilterValues.Contains(v))' />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Initially Collapsed Treeview</div>
                </div>
                <div class="card-body">
                    <TreeView Items="Items" GetParent="GetParent" InitiallyCollapsed="true" />
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Lazy Load Treeview</div>
                </div>
                <div class="card-body">
                    <TreeView Items="_rootItem" GetChildren="GetChildren" HasChildren="HasChildren">
                        <ItemTemplate>
                            @context.Item.Self
                        </ItemTemplate>
                    </TreeView>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <div class="card custom-card overflow-hidden">
                <div class="card-header">
                    <div class="card-title">Markup Treeview</div>
                </div>
                <div class="card-body markup">
                    <MarkupTreeView InitiallyCollapsed="true">
                        <Item Label="Item 1">
                            <Item Label="Item 1.1" ContentIsCollapsable="true">
                                Some detail.
                            </Item>
                            <Item Label="Item 1.2">
                            </Item>
                            <Item Label="Item 1.3">
                            </Item>
                            <Item Label="Item 1.4">
                            </Item>
                        </Item>
                        <Item Label="Item 2">
                            <Item Label="Item 2.1">
                                <Item Label="Item 2.1.1">
                                </Item>
                                <Item Label="Item 2.1.2">
                                </Item>
                                <Item Label="Item 2.1.3">
                                </Item>
                            </Item>
                        </Item>
                    </MarkupTreeView>
                </div>
            </div>
        </div>
    </div>
    <!--End::row-1 -->

</div>

@code {
    
    //Basic Treeview style Start//
    private List<string> SelectedValues = new List<string>
    {
        "3.1.1"
    };
    private List<string> Items = new List<string>
    {
        "Item 1",
        "Item 1.1",
        "Item 1.2",
        "Item 2",
        "Item 3",
        "Item 3.1",
        "Item 3.1.1",
        "Item 3.1.2"
    };
    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }
    //Basic Treeview style End//
    
    //Basic Treeview style2 Start//
    private static readonly List<Item> AllNestedItems = new List<Item>
    {
        new Item
        {
            Self = "Item 1",
            Children = new List<Item>
            {
                new Item
                {
                    Self = "Item 1.1"
                },
                new Item
                {
                    Self = "Item 1.2"
                }
            }
        },
        new Item
        {
            Self = "Item 2"
        },
        new Item
        {
            Self = "Item 3",
            Children = new List<Item>
            {
                new Item
                {
                    Self = "Item 3.1",
                    Children = new List<Item>
                    {
                        new Item
                        {
                            Self = "Item 3.1.1"
                        },
                        new Item
                        {
                            Self = "Item 3.1.2"
                        }
                    }
                },
            }
        }
    };
    
    private List<Item> Nested = AllNestedItems.ToList();
    //Basic Treeview style2 End//

    //Basic Treeview style3 Start//
    private List<string> NestedItems = new List<string>
    {
        "Nested 1",
        "Nested 1.1",
        "Nested 1.2",
        "Nested 2",
        "Nested 3",
        "Nested 3.1",
        "Nested 3.1.1",
        "Nested 3.1.2"
    };
    private string GetNestedItemsParent(string NestedItems)
    {
        var last_period = NestedItems.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return NestedItems.Substring(0, last_period);
        }
    }
    //Basic Treeview style3 End//

    //Basic Treeview style4 Start//
    private List<Item>? SelectedItems { get; set; }

    private async Task<List<Item>> GetChildrenAsync(Item i)
    {
        if (i == null)
        {
            return new List<Item> { new Item { Self = "Dairy" }, new Item { Self = "fruits" },new Item { Self = "Vegetables" } };
        }
        await Task.Delay(1000);
        return i.Self switch
        {
            "Dairy" => new List<Item> { new Item { Self = "Milk" }, new Item { Self = "Butter" }, new Item { Self = "Cream " } ,new Item { Self = "Ghee " },new Item { Self = "yogurt " } ,new Item { Self = "Cheese"}},
            "Cheese" => new List<Item> { new Item { Self = "Mozzarella Cheese" }, new Item { Self = "Cottage Cheese" } },
            "fruits" => new List<Item> {new Item { Self = "Apple" } , new Item { Self = "Mango" } , new Item { Self = "Strawberrie" } , new Item { Self = "PineApple" } , new Item { Self = "Grapes" }  },
            "Vegetables" => new List<Item> { new Item { Self = "Tomato" },new Item { Self = "Brinjal" },new Item { Self = "Potato" },new Item { Self = "Radiish" },new Item { Self = "Corn" } },
            _ => new List<Item>()
        };
    }

    private async Task<bool> HasChildrenAsync(Item i)
    {
        if (i == null)
        {
            return true;
        }
        await Task.Delay(1000);
        return !(i.Self is "C2" or "D1");
    }
    //Basic Treeview style4 End//

    //Basic Treeview style5 End//
    private List<Item> CollapseItems = new List<Item>
    {
        "Nested 1",
        "Nested 1.1",
        "Nested 1.2",
        "Nested 2",
        ("Nested 3", false),
        ("Nested 3.1", false),
        "Nested 3.1.1",
        "Nested 3.1.2"
    };
    private Item GetParent(Item item)
    {
        var last_period = item.Value.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return CollapseItems.FirstOrDefault(v => v.Value == item.Value.Substring(0, last_period));
        }
    }
    
    //Basic Treeview style5 End//
    
    //Basic Treeview style6 Start//
    private static readonly List<Item> AllItems = new List<Item>
    {
        new Item
        {
            Self = "Nested 1",
            Color = "red",
            Children = new List<Item>
            {
                new Item
                {
                    Self = "Nested 1.1",
                    Color = "green"
                },
                new Item
                {
                    Self = "Nested 1.2",
                    Color = "orange"
                }
            }
        },
        new Item
        {
            Self = "Nested 2",
            Color = "blue"
        },
        new Item
        {
            Self = "Nested 3",
            Color = "forestgreen",
            Children = new List<Item>
            {
                new Item
                {
                    Self = "Nested 3.1",
                    Color = "forestgreen",
                    Children = new List<Item>
                    {
                        new Item
                        {
                            Self = "Nested 3.1.1",
                            Color = "forestgreen"
                        },
                        new Item
                        {
                            Self = "Nested 3.1.2",
                            Color = "forestgreen"
                        }
                    }
                },
            }
        }
    };
    private List<Item> CustomNested = AllItems.ToList(); 
    //Basic Treeview style6 End//

    //Basic Treeview style7 Start//
    private bool TreeDisabled { get; set; }
    private List<Item> DisabledItems = new List<Item>
    {
        ("Nested 1", true),
        "Nested 1.1",
        "Nested 1.2",
        "Nested 1.3",
        "Nested 2",
        "Nested 3",
        "Nested 3.1",
        ("Nested 3.1.1", true),
        "Nested 3.1.2"
    };
    private Item GetDisabledParent(Item disableditem)
    {
        var last_period = disableditem.Value.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return DisabledItems.FirstOrDefault(v => v.Value == disableditem.Value.Substring(0, last_period));
        }
    }
    //Basic Treeview style7 End//

    //Basic Treeview style8 Start//
    private List<string> SelectedfilterValues = new List<string>
    {
        "3.1.1"
    };
    private List<string> filterItems = new List<string>
    {
        "Nested 1",
        "Nested 1.1",
        "Nested 1.2",
        "Nested 2",
        "Nested 3",
        "Nested 3.1",
        "Nested 3.1.1",
        "Nested 3.1.2"
    };
    private string GetfilterParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }
    //Basic Treeview style8 End//

    //Basic Treeview style9 Start//
    private List<Item> _rootItem = new List<Item> { new Item { Self = "1" }, new Item { Self = "2" } };
    private List<Item> GetChildren(Item item)
    {
        if (item.Self.Length < 100)
        {
            return new List<Item> { new Item { Self = item.Self + "1" }, new Item { Self = item.Self + "2" } };
        }
        else
        {
            return null;
        }
    }
    private bool HasChildren(Item item)
    {
        return (item.Self.Length < 100);
    }  
    //Basic Treeview style9 End//

    private class Item
    {
        public string? Self { get; set; }
        public string? Color { get; set; }
        public List<Item>? Children { get; set; }
        public string? Value { get; set; }
        public bool Collapsed { get; set; } = true;
        public bool Disabled { get; set; }
        public Item()
        {
            // Initialize default values if needed
            Value = "Default";
            Collapsed = true;
        }
        public Item(string value)
        {
            Value = value;
        }
        public Item((string value, bool state) t)
        {
            Value = t.value;
            Collapsed = t.state;
            Disabled = t.state;
        }
        public static implicit operator Item(string v) => new Item(v);
        public static implicit operator Item((string value, bool state) t) => new Item(t);
    }
}