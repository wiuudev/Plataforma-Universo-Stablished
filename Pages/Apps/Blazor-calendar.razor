@page "/blazor-calendar"
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Globalization
@inject IJSRuntime JSRuntime

<!-- Dragula Css -->
<link rel="stylesheet" href="../assets/libs/dragula/dragula.min.css">

<link href="_content/BlazorCalendar/BlazorCalendar.css" rel="stylesheet" />
<link href="_content/BlazorCalendar/BlazorCalendar.bundle.scp.css" rel="stylesheet" />

<div class="container-fluid">

    <!-- Page Header -->
    <div class="d-md-flex d-block align-items-center justify-content-between my-4 page-header-breadcrumb">
        <h1 class="page-title fw-semibold fs-18 mb-0">Blazor Calendar</h1>
        <div class="ms-md-1 ms-0">
            <nav>
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="javascript:void(0);">Apps</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Blazor Calendar</li>
                </ol>
            </nav>
        </div>
    </div>
    <!-- Page Header Close -->


   <!-- Start::row-1 -->
    <div class="row">
        <div class="col-xl-3">
            <div class="card custom-card">
                <div class="card-header d-grid">
                    <button class="btn btn-primary-light btn-wave"><i class="ri-add-line align-middle me-1 fw-semibold d-inline-block"></i>Create New Event</button>
                </div>
                <div class="card-body p-0">
                    <div class="p-3">
                        <div class="d-flex align-items-center justify-content-between">
                        <h6 class="fw-semibold">
                            Activity :
                        </h6>
                        <button class="btn btn-primary-light btn-sm btn-wave">View All</button>
                        </div>
                    </div>
                    <div class="p-3 border-bottom" id="full-calendar-activity">
                        <ul class="list-unstyled mb-0 fullcalendar-events-activity">
                        <li>
                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                            <p class="mb-1 fw-semibold">
                                Monday, Jan 1,2023
                            </p>
                            <span class="badge bg-light text-default mb-1">12:00PM - 1:00PM</span>
                            </div>
                            <p class="mb-0 text-muted fs-12">
                            Meeting with a client about new project requirement.
                            </p>
                        </li>
                        <li>
                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                            <p class="mb-1 fw-semibold">
                                Thursday, Dec 29,2022
                            </p>
                            <span class="badge bg-success mb-1">Completed</span>
                            </div>
                            <p class="mb-0 text-muted fs-12">
                            Birthday party of niha suka
                            </p>
                        </li>
                        <li>
                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                            <p class="mb-1 fw-semibold">
                                Wednesday, Jan 3,2023
                            </p>
                            <span class="badge bg-warning-transparent mb-1">Reminder</span>
                            </div>
                            <p class="mb-0 text-muted fs-12">
                            WOrk taget for new project is completing
                            </p>
                        </li>
                        <li>
                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                            <p class="mb-1 fw-semibold">
                                Friday, Jan 20,2023
                            </p>
                            <span class="badge bg-light text-default mb-1">06:00PM - 09:00PM</span>
                            </div>
                            <p class="mb-0 text-muted fs-12">
                            Watch new movie with family
                            </p>
                        </li>
                        <li>
                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                            <p class="mb-1 fw-semibold">
                                Saturday, Jan 07,2023
                            </p>
                            <span class="badge bg-danger-transparent mb-1">Due Date</span>
                            </div>
                            <p class="mb-0 text-muted fs-12">
                            Last day to pay the electricity bill and water bill.need to check the bank details.
                            </p>
                        </li>
                        </ul>
                    </div>
                    <div class="p-3">
                        <img src="../assets/images/media/media-83.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-9">
            <div class="card custom-card">
                <div class="card-header">
                    <div class="card-title">Full Calendar</div>
                </div>
                <div class="card-body">
                    <div id="calendar2">
                        <div class="d-sm-flex justify-content-between text-center mb-4">
                            <div class="mb-2 mb-sm-0 d-flex justify-content-sm-start justify-content-center flex-row">
                                <div class="btn-group btn-group-sm me-2" role="group" aria-label="Basic example">
                                    <button type="button" class="btn btn-primary btn-wave" @onclick="@(m => ClicMonthNavigate(-1))"><i class="ri-arrow-left-s-line"></i></button>  
                                    <button type="button" class="btn btn-primary btn-wave" @onclick="@(m => ClicMonthNavigate(1))"><i class="ri-arrow-right-s-line"></i></button>
                                </div>
                                <button type="button" @onclick="GoToday" class="btn btn-sm btn-primary btn-wave">Today</button>
                            </div>
                            <h2 class="mb-2 mb-sm-0  console">@currentMonth</h2>
                            <div class="btn-group btn-group-sm me-2" role="group" aria-label="View Selection">
                                <button type="button" class="btn btn-primary-light @(SelectedView == DisplayedView.Monthly ? "active" : "")" @onclick="() => SelectView(DisplayedView.Monthly)">Monthly</button>
                                <button type="button" class="btn btn-primary-light @(SelectedView == DisplayedView.Weekly ? "active" : "")" @onclick="() => SelectView(DisplayedView.Weekly)">Weekly</button>
                                <button type="button" class="btn btn-primary-light @(SelectedView == DisplayedView.Annual ? "active" : "")" @onclick="() => SelectView(DisplayedView.Annual)">Day</button>
                            </div>
                        </div>
                        <CalendarContainer FirstDate="today" TasksList="TasksList?.ToArray()" DisplayedView="SelectedView" >
                            <WeekView OutsideCurrentMonthClick="OutsideCurrentMonthClick" WeekDaysColor="@WeekDaysColor" SaturdayColor="@SaturdayColor" SundayColor="@SundayColor" Draggable="@draggable" TaskClick="TaskClick" DayClick="DayClick" DragStart="DragStart" DropTask="DropTask" HighlightToday="true" />
                            <MonthlyView OutsideCurrentMonthClick="OutsideCurrentMonthClick" WeekDaysColor="@WeekDaysColor" SaturdayColor="@SaturdayColor" SundayColor="@SundayColor" Draggable="@draggable" TaskClick="TaskClick" DayClick="DayClick" DragStart="DragStart" DropTask="DropTask" HighlightToday="true" />
                            <AnnualView Months="months" HeaderClick="HeaderClick" WeekDaysColor="@WeekDaysColor" SaturdayColor="@SaturdayColor" SundayColor="@SundayColor" Draggable="@draggable" TaskClick="TaskClick" EmptyDayClick="EmptyDayClick"  DragStart="DragStart" DropTask="DropTask" />
                        </CalendarContainer>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--End::row-1 -->



</div>

@code{
    [Parameter]
    public string SaturdayColor { get; set; } = "rgba(var(--primary-rgb),0.2)";
    [Parameter]
    public string SundayColor { get; set; } = "rgba(var(--primary-rgb),0.3)";

    public string WeekDaysColor  { get; set; } = "var(--default-body-bg-color)";

	private DateTime today = DateTime.Today;  
	private int months = 0;
	private List<Tasks>? TasksList;
	private bool draggable = true;
	private string fakeConsole = "";
	private string currentMonth = "";
   
	protected override void OnInitialized()
	{
        
		 currentMonth = today.ToString("MMMM - yyyy");
   
		TasksList = new()
		{
			new Tasks { ID = 0, DateStart = today.AddDays(-9).AddHours(8), DateEnd = today.AddDays(-8).AddHours(8), Code = "Spruko Meetup", Color = "#845adf", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" },
			new Tasks { ID = 1, DateStart = today.AddDays(6).AddHours(8), DateEnd = today.AddDays(6).AddHours(8), Code = "Design Review", Color = "#23b7e5", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" } ,
			new Tasks { ID = 2, DateStart = today.AddDays(2).AddHours(8), DateEnd = today.AddDays(2).AddHours(4), Code = "Lifestyle Conference", Color = "#845adf", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" } ,
			new Tasks { ID = 3, DateStart = today.AddDays(10).AddHours(8), DateEnd = today.AddDays(10).AddHours(8), Code = "Team Weekly Brownbag", Color = "#f5b849",  Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary"},
			new Tasks { ID = 4, DateStart = today.AddDays(-7).AddHours(8), DateEnd = today.AddDays(-6).AddHours(8), Code = "Music Festival", Color = "#26bf94", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" },
			new Tasks { ID = 5, DateStart = today.AddDays(12).AddHours(8), DateEnd = today.AddDays(14).AddHours(8), Code = "Attend Lea\'s Wedding", Color = "#26bf94", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" },
			
            new Tasks { ID = 6, DateStart = today.AddDays(-7).AddHours(8), DateEnd = today.AddDays(-7).AddHours(8), Code = "Harcates Birthday", Color = "#49b6f5" },
            new Tasks { ID = 7, DateStart = today.AddDays(17).AddHours(8), DateEnd = today.AddDays(17).AddHours(8), Code = "Bunnysin\'s Birthday", Color = "#49b6f5", Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" } ,
			new Tasks { ID = 8, DateStart = today.AddDays(20).AddHours(8), DateEnd = today.AddDays(20).AddHours(8), Code = "Lee shin\'s Birthday", Color = "#49b6f5", Caption="All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" },
			new Tasks { ID = 9, DateStart = today.AddDays(184).AddHours(8), DateEnd = today.AddDays(184).AddHours(8), Code = "Shinchan\'s Birthday", Color = "#49b6f5",Caption = "All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary" },
			
			new Tasks { ID = 10, DateStart = today.AddDays(-5), DateEnd = today.AddDays(-4), Code = "Festival Day", Color = "#e6533c" },
			new Tasks { ID = 11, DateStart = today.AddDays(7), DateEnd = today.AddDays(7), Code = "Memorial Day", Color = "#e6533c" },
			new Tasks { ID = 12, DateStart = today.AddDays(14), DateEnd = today.AddDays(14), Code = "Diwali", Color = "#e6533c" },

			new Tasks { ID = 13, DateStart = today.AddDays(-4), DateEnd = today.AddDays(-3), Code = "My Rest Day", Color = "#23b7e5" },
			new Tasks { ID = 14, DateStart = today.AddDays(18), DateEnd = today.AddDays(19), Code = "My Rest Day", Color = "#23b7e5",},
		};
	}

	private void ChangeFirstDate(string value)
	{
		if (string.IsNullOrEmpty(value)) return;
		today = DateTime.Parse(value.ToString());
	}
	private void GoToday()
	{
		today = DateTime.Today;
       currentMonth = today.ToString("MMMM - yyyy");
	}

	private void ClicMonthNavigate(int monthToAdd)
    {
        today = today.AddMonths(monthToAdd);
        currentMonth = today.ToString("MMMM - yyyy");
    }

	private void OutsideCurrentMonthClick(int MonthAdded)
	{
		today = today.AddMonths(MonthAdded);
	}

	private void TaskClick(ClickTaskParameter clickTaskParameter)
	{
		fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
	}	

	private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
	}

	private void DragStart(DragDropParameter dragDropParameter)
	{	 
		fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
	}  

	private void DropTask(DragDropParameter dragDropParameter)
	{													 
		fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";
		Tasks taskDropped = TasksList?.FirstOrDefault(t => t.ID == dragDropParameter.taskID) ?? new Tasks();
        if (taskDropped != null)
        {
            var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
            taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
            taskDropped.DateStart = dragDropParameter.Day;
        }
	}
	private void EmptyDayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
	}

	private BlazorCalendar.DisplayedView SelectedView = DisplayedView.Monthly;

	private void HeaderClick(DateTime monthclicked)
	{
		SelectedView = DisplayedView.Monthly;
	}
    private void SelectView(DisplayedView view)
    {
        SelectedView = view;
    }

}


    