@inject MenuDataService MenuDataService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@code {  
    [Parameter] public MainMenuItems? menuData { get; set; }
    [Parameter] public EventCallback<(MainMenuItems, MainMenuItems[])> OnToggleSubmenu { get; set; } // Add [Parameter] attribute
    [Parameter] public EventCallback<(MainMenuItems, MainMenuItems[])> OnSetSubmenu { get; set; } // Add [Parameter] attribute

    [Parameter] public int Level { get; set; }
    private async Task TriggerFunction(MainMenuItems menu, MainMenuItems[] childmenuData)
    {
        var tuple = (menu, childmenuData);
        await OnToggleSubmenu.InvokeAsync(tuple);
    }
    private async Task SetFunction(MainMenuItems menu, MainMenuItems[] childmenuData)
    {
        var tuple = (menu, childmenuData);
        await OnSetSubmenu.InvokeAsync(tuple);
    }
}

@if (menuData != null && menuData.Children != null && menuData.Children.Any())
{
    <a data-id="@menuData.RandomNumber" href="javascript:void(0);" class="@menuData.DirChange side-menu__item @(menuData.Selected ? "active" : "")" @onclick="() => TriggerFunction(menuData, new MainMenuItems[0])">
        <span class="side-menu__label  me-2">@menuData.Title 
            @if (!string.IsNullOrEmpty(menuData.BadgeValue))
            {
                <span class="badge @(menuData.BadgeClass) ms-1">@menuData.BadgeValue</span>
            }
        </span>
        <i class="fe fe-chevron-right side-menu__angle"></i>
    </a>
    <ul class="slide-menu @(($"child{Level}")) @(menuData.Active ? "double-menu-active" : "") @(menuData.DirChange ? "force-left" : "")" style="@(menuData.Active ? "display : block" : "")">
        @foreach (var menuItem in menuData.Children)
        {
            <li class="@GetMenuItemClasses(menuItem)">
                @if (menuItem.Type == "link")
                {
                    <a href="@menuItem.Path" class="side-menu__item @(menuItem.Selected ? "active" : "")"
                     @onclick="async (e) => { await SetFunction(menuItem, new MainMenuItems[0]); Navigation.NavigateTo(menuItem.Path); }" @onclick:preventDefault >
                        @menuItem.Title
                        @if (!string.IsNullOrEmpty(menuItem.BadgeValue))
                        {
                            <span class="badge @(menuItem.BadgeClass) ms-1">@menuItem.BadgeValue</span>
                        }
                    </a>
                }
                @if (menuItem.Type == "empty")
                {
                    <a href="javascript:;" class="side-menu__item">
                        @menuItem.Title
                        @if (!string.IsNullOrEmpty(menuItem.BadgeValue))
                        {
                            <span class="badge @(menuItem.BadgeClass) ms-1">@menuItem.BadgeValue</span>
                        }
                    </a>
                }
                @if (menuItem.Type == "sub")
                {
                    <SubNavMenu menuData="@menuItem" OnToggleSubmenu="@OnToggleSubmenu" OnSetSubmenu="@OnSetSubmenu" Level="@(Level + 1)"/>
                }
            </li>
        }
    </ul>
}

@code {
    public int GetRandomNumber()
    {
        Random rand = new Random();
        return rand.Next(1000); // Adjust range as needed
    }
    private string GetMenuItemClasses(MainMenuItems menuItem)
    {
        var classes = new List<string>();
        if (!string.IsNullOrEmpty(menuItem.MenuTitle))
        {
            classes.Add("slide__category");
        }
        if (menuItem.Type == "empty" || menuItem.Type == "link" || menuItem.Type == "sub")
        {
            classes.Add("slide");
        }
        if (menuItem.Active)
        {
            classes.Add("open");
        }
        if (menuItem.Selected)
        {
            classes.Add("active");
        }
        return string.Join(" ", classes);
    }
}
