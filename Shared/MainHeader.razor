@inject StateService stateService
@inject IJSRuntime JSRuntime

        <header class="app-header">

           <!-- Start::main-header-container -->
           <div class="main-header-container container-fluid">

               <!-- Start::header-content-left -->
               <div class="header-content-left">

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <div class="horizontal-logo">
                           <a href="home" class="header-logo">
                               <img src="assets/images/Unigestor/Logo-NEW.png" alt="logo" class="desktop-logo">
                               <img src="../assets/images/brand-logos/toggle-logo.png" alt="logo" class="toggle-logo">
                               <img src="assets/images/Unigestor/Logo-NEW.png" alt="logo" class="desktop-dark">
                               <img src="../assets/images/brand-logos/toggle-dark.png" alt="logo" class="toggle-dark">
                               <img src="assets/images/Unigestor/Logo-NEW.png" alt="logo" class="desktop-white">
                               <img src="../assets/images/brand-logos/toggle-white.png" alt="logo" class="toggle-white">
                           </a>
                       </div>
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <!-- Start::header-link -->
                       <a aria-label="Hide Sidebar" @onclick="ToggleMenu" class="sidemenu-toggle header-link animated-arrow hor-toggle horizontal-navtoggle" data-bs-toggle="sidebar" href="javascript:void(0);"><span></span></a>
                       <!-- End::header-link -->
                   </div>
                   <!-- End::header-element -->

               </div>
               <!-- End::header-content-left -->

               <!-- Start::header-content-right -->
               <div class="header-content-right">
                   
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                  
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element header-theme-mode" @onclick='() => colorthemeFn()'>
                       <!-- Start::header-link|layout-setting -->
                       <a href="javascript:void(0);" class="header-link layout-setting">
                           <span class="light-layout">
                               <!-- Start::header-link-icon -->
                           <i class="bx bx-moon header-link-icon"></i>
                               <!-- End::header-link-icon -->
                           </span>
                           <span class="dark-layout">
                               <!-- Start::header-link-icon -->
                           <i class="bx bx-sun header-link-icon"></i>
                               <!-- End::header-link-icon -->
                           </span>
                       </a>
                       <!-- End::header-link|layout-setting -->
                   </div>
                   
                   <!-- Start::header-element -->
                   <div class="header-element notifications-dropdown">
                       <!-- Start::header-link|dropdown-toggle -->
                       <a href="javascript:void(0);" class="header-link dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" id="messageDropdown" aria-expanded="false">
                           <i class="bx bx-bell header-link-icon"></i>
                           <span class="badge bg-secondary rounded-pill header-icon-badge pulse pulse-secondary" id="notification-icon-badge">@(NotifyListData.Count)</span>
                       </a>
                       <!-- End::header-link|dropdown-toggle -->
                       <!-- Start::main-header-dropdown -->
                       <div class="main-header-dropdown dropdown-menu dropdown-menu-end" data-popper-placement="none">
                           <div class="p-3">
                               <div class="d-flex align-items-center justify-content-between">
                                   <p class="mb-0 fs-17 fw-semibold">Notificações</p>
                                   <span class="badge bg-secondary-transparent" >@(NotifyListData.Count) Não lidas</span>
                               </div>
                           </div>
                           <div class="dropdown-divider"></div>
                            <BlazorOverlayScrollbars>
                                <BlazorOverlayScrollbarsContent>
                                    <ul class="list-unstyled mb-0" id="header-notification-scroll">
                                    @foreach (var NotifyList in NotifyListData)
                                    {
                                        <li class="dropdown-item">
                                            <div class="d-flex align-items-start">
                                                    <div class="pe-2">
                                                        <span class="avatar avatar-md @NotifyList.iconBg avatar-rounded"><i class="@NotifyList.icon fs-18"></i></span>
                                                    </div>
                                                    <div class="flex-grow-1 d-flex align-items-center justify-content-between">
                                                    <div>
                                                        <p class="mb-0 fw-semibold"><a href="notifications">@NotifyList.title</a></p>
                                                        <span class="text-muted fw-normal fs-12 header-notification-text">@NotifyList.description</span>
                                                    </div>
                                                    <div>
                                                        <a href="javascript:void(0);" @onclick="@(() => DeleteNotifyList(NotifyList))"  class="min-w-fit-content text-muted me-1"><i class="ti ti-x fs-16"></i></a>
                                                    </div>
                                                    </div>
                                            </div>
                                        </li>
                                    }
                                    </ul>
                                </BlazorOverlayScrollbarsContent>
                            </BlazorOverlayScrollbars>
                            
                            @if (NotifyListData.Count < 1)
                            {
                                <div class="p-5 empty-item1">
                                    <div class="text-center">
                                        <span class="avatar avatar-xl avatar-rounded bg-secondary-transparent">
                                            <i class="ri-notification-off-line fs-2"></i>
                                        </span>
                                        <h6 class="fw-semibold mt-3">Sem novas notificações</h6>
                                    </div>
                                </div>
                            } 
                            else {
                                <div class="p-3 empty-header-item1 border-top">
                                    <div class="d-grid">
                                        <a href="notifications" class="btn btn-primary">Ver todas</a>
                                    </div>
                                </div>
                            }
                       </div>
                       <!-- End::main-header-dropdown -->
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element header-fullscreen">
                       <!-- Start::header-link -->
                       <a onclick="openFullscreen();" href="javascript:void(0);" class="header-link">
                           <i class="bx bx-fullscreen full-screen-open header-link-icon"></i>
                           <i class="bx bx-exit-fullscreen full-screen-close header-link-icon d-none"></i>
                       </a>
                       <!-- End::header-link -->
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <!-- Start::header-link|dropdown-toggle -->
                       <a href="javascript:void(0);" class="header-link dropdown-toggle" id="mainHeaderProfile" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                           <div class="d-flex align-items-center">
                               <div class="me-sm-2 me-0">
                                   <img src="../assets/images/faces/9.jpg" alt="img" width="32" height="32" class="rounded-circle">
                               </div>
                               <div class="d-sm-block d-none">
                                   <p class="fw-semibold mb-0 lh-1">Ademir Rosa</p>
                                   <span class="op-7 fw-normal d-block fs-11">Administrador</span>
                               </div>
                           </div>
                       </a>
                       <!-- End::header-link|dropdown-toggle -->
                       <ul class="main-header-dropdown dropdown-menu pt-0 overflow-hidden header-profile-dropdown dropdown-menu-end" aria-labelledby="mainHeaderProfile">
                           <li><a class="dropdown-item d-flex" href="profile"><i class="ti ti-user-circle fs-18 me-2 op-7"></i>Perfil</a></li>
                           <li><a class="dropdown-item d-flex border-block-end" href="to-do-list"><i class="ti ti-clipboard-check fs-18 me-2 op-7"></i>Tarefas</a></li>
                           <li><a class="dropdown-item d-flex" href="mail-settings"><i class="ti ti-adjustments-horizontal fs-18 me-2 op-7"></i>Configurações</a></li>
                           <li><a class="dropdown-item d-flex" href="chat"><i class="ti ti-headset fs-18 me-2 op-7"></i>Suporte</a></li>
                           <li><a class="dropdown-item d-flex" href="sign-in-cover"><i class="ti ti-logout fs-18 me-2 op-7"></i>Sair</a></li>
                       </ul>
                   </div>  
                   <!-- End::header-element -->

               </div>
               <!-- End::header-content-right -->

           </div>
           <!-- End::main-header-container -->

        </header>


<!-- cart Data Start-->
@code {                     
    public class CartList
    {
        public int id { get; set; }
        public string? img { get; set; }
        public string? title { get; set; }
        public List<Category>? categoryList { get; set; }
        public string? price { get; set; }
    }
    public class Category
    {
        public string? value { get; set; }
        public string? valueBgColor { get; set; }    
    }

     List<CartList> CartListData = new List<CartList>()
    {
        new CartList { 
            id = 1,
            img = "assets/images/ecommerce/jpg/1.jpg",
            title = "SomeThing Phone", 
            categoryList = new List<Category> {
                new Category { value = "Metallic Blue", valueBgColor = ""},
                new Category { value = "6gb Ram", valueBgColor = ""},
            },
            price = "1,299.00"
        },
        new CartList {
            id= 2, 
            img= "assets/images/ecommerce/jpg/3.jpg", 
            title= "Stop Watch", 
            categoryList = new List<Category> {
                new Category { value= "6gb Ram", valueBgColor= "" },
                new Category { value= "Free shipping", valueBgColor= "bg-pink-transparent" },
            }, 
            price= "179.29"
        },
        new CartList {
            id= 3, 
            img= "assets/images/ecommerce/jpg/5.jpg", 
            title= "Photo Frame", 
            categoryList = new List<Category> {
                 new Category { value= "Decorative", valueBgColor= "" }
            }, 
            price= "29.00"
        },
        new CartList {
            id= 4, 
            img= "assets/images/ecommerce/jpg/4.jpg", 
            title= "Kikon Camera", 
            categoryList = new List<Category> {
                 new Category { value= "Black", valueBgColor= "" },
                 new Category { value= "50MM", valueBgColor= "" },
            }, 
            price= "4,999.00"
        },
        new CartList {
            id= 5, 
            img= "assets/images/ecommerce/jpg/6.jpg", 
            title= "Canvas Shoes", 
            categoryList = new List<Category> {
                new Category { value= "Gray", valueBgColor= "" },
                 new Category { value= "Sports", valueBgColor= "" },
            }, 
            price= "129.00"
        },
    };

    void DeleteCartlist(CartList CartList)
    {
        CartListData.Remove(CartList);
    }
}

<!-- cart Data End-->


<!-- Notifications Data Start-->
@code {                     
    public class NotifyList
    {
        public int id { get; set; }
        public string? icon { get; set; }
        public string? iconBg { get; set; }
        public string? title { get; set; }
        public string? description { get; set; }
    }

     List<NotifyList> NotifyListData = new List<NotifyList>()
    {
        new NotifyList { id= 1, icon= "ti ti-gift", iconBg= "bg-primary-transparent", title= "Notificação 1", description= "Descrição da notificação 1" },
        new NotifyList { id= 2, icon= "ti ti-discount-2", iconBg= "bg-secondary-transparent", title= "Notificação 2", description= "Descrição da notificação 2" },
    };

    void DeleteNotifyList(NotifyList NotifyList)
    {
        NotifyListData.Remove(NotifyList);
    }
}

<!-- Notifications Data End-->

@code {        
    private async void ToggleMenu() {
        var toggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-vertical-style");
        var navStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-style");
        var isdoubleMenuActive = await JSRuntime.InvokeAsync<bool>("interop.isEleExist", ".double-menu-active");
        var inner = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");
          
        if (inner <= 992) {
                if (toggled == "open") {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");
                } else {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "open");
                }
        } 
        else {
            if (navStyle != null) {
                if (toggled != null) {
                    await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                } 
                else {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", navStyle + "-closed");
                }
            } 
            else if (verticalStyle != null) {
                if (verticalStyle == "doublemenu") {
                    if (toggled == "double-menu-open" && isdoubleMenuActive) {
                        await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
                    } 
                    else {
                        if (isdoubleMenuActive) {
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-open");
                        }
                    }
                } 
                else if (toggled != null) {
                        await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                } 
                else {
                    switch (verticalStyle) {
                        case "closed":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close-menu-close");
                            break;
                        case "icontext":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-text-close");
                            break;
                        case "overlay":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-overlay-close");
                            break;
                        case "detached":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "detached-close");
                            break;
                    }
                }
            }
        }
    }
    
    private AppState currentState => stateService.GetAppState();
    private async void colorthemeFn()
    {
        var val = currentState.ColorTheme == "light" ? "dark" : "light";
        await JSRuntime.InvokeAsync<string>("interop.setLocalStorageItem", "ynexcolortheme", val);
        await stateService.colorthemeFn(val, true);
    }
}