function tooltip_object(t, o) { let e = ""; for (let i of t.fields_name) { let n = ""; void 0 !== o.properties && ("{}" !== JSON.stringify(o.properties) ? n = "<b>" + i + "</b>" + `: <i>${void 0 === o.properties[i] ? "" : o.properties[i]}</i>` + "<br>" : void 0 !== o.geometry.properties && (n = "<b>" + i + "</b>" + `: <i>${void 0 === o.geometry.properties[i] ? "" : o.geometry.properties[i]}</i>` + "<br>")), e += n } let r = [], s = "point", l = null; "point" === (l = void 0 !== o.geometry ? o.geometry : o).type.toLowerCase() && (r = t.coordinate_inversion ? [l.coordinates[1], l.coordinates[0]] : [l.coordinates[0], l.coordinates[1]], s = "point"), "polygon" === l.type.toLowerCase() && (r = t.coordinate_inversion ? l.coordinates.map(function (t) { return t.map(function (t) { return [t[1], t[0]] }) }) : l.coordinates, s = "polygon"), void 0 !== l && void 0 !== l.type && "linestring" === l.type.toLowerCase() && (r = t.coordinate_inversion ? l.coordinates.map(function (t) { return [t[1], t[0]] }) : o.coordinates, s = "linestring"); let p = 0, a = 1e4; return void 0 !== t.scaling && null !== tooltip_object.scaling && (void 0 !== t.scaling.start_with && null !== t.scaling.start_with && (p = parseInt(t.scaling.start_with)), void 0 !== t.scaling.stop_with && null !== t.scaling.stop_with && (a = parseInt(t.scaling.stop_with))), { content: e.slice(0, e.length - 4), coordinates: r, offset: void 0 === t.offset ? [0, 0] : t.offset, permanent: void 0 === t.permanent || t.permanent, opacity: void 0 === t.opacity ? 0 : t.opacity, coordinate_inversion: void 0 !== t.coordinate_inversion && t.coordinate_inversion, geometry_type: s, start_with: p, stop_with: a } } function is_json_object(t) { try { var o = JSON.parse(t); if (o && "object" == typeof o) return !0 } catch (e) { } return !1 } function _is_point(t) { if (0 === t.length) return !1; { let o = t[0].geometry; if (null == o) return !1; { let e = o.type; return null != e && "point" === e.toLowerCase() } } } function _is_polygon(t) { if (0 === t.length) return !1; { let o = t[0].geometry; if (null == o) return !1; { let e = o.type; return null != e && "polygon" === e.toLowerCase() } } } function _is_linestring(t) { if (0 === t.length) return !1; { let o = t[0]; return void 0 === o.geometry && void 0 !== o.type && "linestring" === o.type.toLowerCase() } } export { tooltip_object, is_json_object, _is_point, _is_polygon, _is_linestring };